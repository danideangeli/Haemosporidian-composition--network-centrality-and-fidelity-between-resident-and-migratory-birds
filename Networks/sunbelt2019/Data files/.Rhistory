plot(scalemodel, ask = FALSE)
plot(model1, ask = FALSE)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(ggplot2)
library(devtools)
Estimate<-c(0.45,-0.01,-0.01,0.01,0.08,-0.42)
LowCI<-c(-0.45,-0.02,-0.01,0,-0.16,-0.79)
HighCI<-c(1.44,0.01,0.01,0.02,0.32,-0.07)
TicksR<-cbind(Estimate,LowCI,HighCI)
TicksR<-as.data.frame(TicksR)
TicksR$Labels<-c("Migration", "Temperature","Precipitation","Weight","Ground","Season")
library(ggplot2)
a <- theme(
panel.background = element_rect(fill = "white", colour = "white",
size = 2, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "white"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "white"),
axis.line = element_line(colour = "black"))
p <- plot_model(data=TicksR, aes(x=Labels, y=Estimate, ymin=LowCI, ymax=HighCI), type = "est", vline.color = "black", theme = a)
load("C:/Users/danid/Documents/Lab Poulin/Carrapatos Alan/analiseCarrapatoRiqueza.RData")
plot(scalemodel, ask = FALSE)
Esti <- plot(scalemodel, ask = FALSE)
Esti
View(Esti)
plot(scalemodel, ask = FALSE, combo = c("dens"))
plot(scalemodel, ask = FALSE, combo = c("dens", "trace"))
library(brms)
plot(scalemodel, ask = FALSE, pars = "^b_")
install.packages("compute.es")
library(compute.es)
#extrair informações de estatísticas quando não há informações
library(compute.es)
#exemplo:
tes(5.44, 5, 5)
library(metafor)
install.packages("metafor")
library(metafor)
?escalc()
#Começando a meta-análise
?rma
#Meta-análise com modelos mistos
rma.mv()
#Meta-análise com modelos mistos
rma.mv()
#Meta-análise com modelos mistos
?rma.mv()
library(scales)
library(ape)
library(rotl)
install.packages("rotl")
library(rotl)
?rma.mv
res= residuals(teste6)
plot.phylo(myphy, type = "fan", show.tip.label = FALSE)
library(tidyverse)
library(devtools) # load package
#devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
library(pkgbuild) # load package
find_rtools() # should be TRUE, assuming you have Rtools 3.5
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(ggplot2)
library(brms)
library(readxl)
library(ggpubr)
library(vegan)
library(ape)
library(ips)
library(MCMCtreeR)
library(treeio)
plot.phylo(myphy, type = "fan", show.tip.label = FALSE)
myphy <- readRDS("C:/Users/danid/Documents/Lab Poulin/PhD/PhD/Dados/PhD/myphy.rds")
plot.phylo(myphy, type = "fan", show.tip.label = FALSE)
plot.phylo(myphy, type = "fan", show.tip.label = TRUE)
library(readxl)
library(tidyverse)
library(ape)
dados <- read_excel("PD7.xlsx")
dados <- read_excel("PD7.xlsx", sheet = "Especies>10")
dados <- read_excel("PD7.xlsx", sheet = "Especie>10")
dados <- dados %>%
filter(Status != "SI") %>%
filter(Status != "NA")
View(dados)
dados1 <- dados %>%
group_by(Localidade) %>%
group_by(Latitude, add = TRUE) %>%
group_by(Longitude, add = TRUE)%>%
summarise(n_individuals = n(),
pos = sum(Diagnostico),
richness = n_distinct(Linhagem))%>%
mutate(prevalence = pos/n_individuals)
View(dados1)
dados1 <- dados1 %>%
mutate(prevalence = pos/n_individuals)
View(dados1)
dados1 <- dados %>%
group_by(Localidade) %>%
group_by(Latitude, add = TRUE) %>%
group_by(Longitude, add = TRUE)%>%
summarise(n_individuals = n(),
pos = sum(Diagnostico),
richness = n_distinct(Linhagem))
dados1 <- dados1 %>%
mutate(prevalence = pos/n_individuals)
View(dados1)
data <- as.matrix(dist(cbind(dados1$Longitude, dados1$Latitude)))
data1 <- 1/data
diag(data1) <- 0
data1 <-ifelse(data1=="Inf",0,data1 )
data1[1:5, 1:5]
Moran.I(dados1$richness, data1, na.rm = TRUE)
dados1$prevalence <- as.numeric(dados1$prevalence)
Moran.I(dados1$prevalence, data1, na.rm = TRUE)
load("C:/Users/danid/Documents/Lab Poulin/Carrapatos Alan/Carrapatos/CarrapatoFinal.RData")
library(tidyverse)
library(readxl)
library(ape)
library(brms)
View(data6)
#remotes::install_github("rvlenth/emmeans")
library(emmeans)
fit <- sampling(model)
library(rstan)
library(installr)
library(tidybayes)
library(rstanarm)
fit <- sampling(model)
summary(scalemodel)
library(hillR)
?pd
?ape::pd
?pd
library(ape)
library(picante)
load("C:/Users/danid/Documents/Lab Poulin/PhD/PhD/Dados/Apêndice/Hill1.RData")
View(SpeValue)
View(Hill1)
library(hillR)
SpeValue <- pd(data, mybirds_tree)
SpeValue <- pd(data, mybirds_tree, include.root = FALSE)
View(SpeValue)
View(Hill)
?Hill
?hill_phylo
Hill <- hill_phylo(data, mybirds_tree)
Hill <- as.data.frame(Hill)
Hill1 <- rownames_to_column(Hill, var = "Lineage") %>% as_tibble()
Hill1
View(Hill1)
load("C:/Users/danid/Documents/Lab Poulin/PhD/PhD/Dados/Apêndice/Hill1.RData")
plot(dados6$Hill, dados6$HillLineages)
lm(dados6$HillLineages, dados6$HillLineages)
lm(dados6$HillLineages ~dados6$HillLineages)
teste <- lm(dados6$HillLineages ~dados6$HillLineages)
plot(teste)
summary(teste)
teste <- cor(dados6$Hill, dados6$HillLineages)
summary(teste)
teste
teste <- cor(dados6$Hill, dados6$NObs)
teste
teste <- cor(dados6$Hill, dados6$HillLineages)
teste
summary.pgls(mod3)
library(pGLS)
summary.pgls(mod1)
summary.pgls(mod1)
library(pGLS)
library(caper)
summary.pgls(mod1)
summary.pgls(mod2)
summary.pgls(mod3)
load("C:/Users/danid/Documents/Lab Poulin/PhD/PhD/Dados/Apêndice/HillEurope1.RData")
summary.pgls(mod1)
summary.pgls(mod3)
load("C:/Users/danid/Documents/Lab Poulin/PhD/PhD/Dados/Apêndice/Tabelas/Hill2.RData")
library(caper)
mod2 <- pgls(Nmedio ~ Hill + NObs, dados7)
View(dados6)
mod2 <- pgls(Nmediolocal ~ Hill + NObs, dados7)
summary.pgls(mod2)
install.packages("igraph")
install.packages("network")
install.packages("sna")
install.packages("ggraph")
install.packages("visNetwork")
install.packages("threejs")
install.packages("networkD3")
install.packages("ndtv")
library("igraph")
library("network")
library("sna")
library("ggraph")
library("visNetwork")
library("threejs")
library("networkD3")
library("ndtv")
setwd("~/Lab Poulin/PhD/PhD/Dados/Capítulo 3")
setwd("~/Lab Poulin/PhD/PhD/Dados/Capítulo 3")
setwd("~/Lab Poulin/PhD/PhD/Dados/Capítulo 3/sunbelt2019/Data files")
odes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
View(nodes)
View(links)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net
?graph_from_data_frame
View(links)
View(nodes)
View(net)
View(links)
E(net)       # The edges of the "net" object
V(net)       # The vertices of the "net" object
E(net)$type  # Edge attribute "type"
V(net)$media # Vertex attribute "media"
# Find nodes and edges by attribute:
# (that returns oblects of type vertex sequence/edge sequence)
V(net)[media=="BBC"]
E(net)[type=="mention"]
# You can also examine the network matrix directly:
net[1,]
net[5,7]
# Get an edge list or a matrix:
as_edgelist(net, names=T)
# Get an edge list or a matrix:
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
# Or data frames describing nodes and edges:
as_data_frame(net, what="edges")
as_data_frame(net, what="vertices")
plot(net)
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net)
plot(net)
plot(net, edge.arrow.size=.4,vertex.label=NA)
plot(net, edge.arrow.size=.2,vertex.label=NA)
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
head(nodes2)
head(links2)
View(nodes2)
View(links2)
View(links)
View(links2)
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
net2 <- graph_from_incidence_matrix(links2)
table(V(net2)$type)
plot(net2)
plot(ne2t, edge.arrow.size=.2,vertex.label=NA)
plot(net2, edge.arrow.size=.2,vertex.label=NA)
table(V(net2)$type)
?table
net2 <- graph_from_incidence_matrix(links2)
plot(net2, edge.arrow.size=.2,vertex.label=NA)
plot(net, edge.arrow.size=.4, edge.color="orange", edge.curved=.1,
vertex.color="orange", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
View(links)
View(nodes)
plot(net, edge.arrow.size=.4, edge.color="blue", edge.curved=.1,
vertex.color="blue", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
plot(net, edge.arrow.size=.4, edge.color="turquoise2", edge.curved=.1,
vertex.color="turquoise2", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
plot(net, edge.arrow.size=.2, edge.color="turquoise2", edge.curved=.1,
vertex.color="turquoise2", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode="all")
V(net)$size <- deg*3
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode="all")
?degree
# Compute node degrees (#links) and use that to set node size:
deg <- sna::degree(net, mode="all")
# Compute node degrees (#links) and use that to set node size:
deg <- igraph::degree(net, mode="all")
V(net)$size <- deg*3
# We could also use the audience size value:
V(net)$size <- V(net)$audience.size*0.6
# Set edge width based on weight:
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "brown2"
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
# Set edge width based on weight:
E(net)$width <- E(net)$weight/4
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "brown2"
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "brown2"
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
plot(net, vertex.color="turquoise2")
E(net)$edge.color <- "brown2"
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net, vertex.color="turquoise2")
E(net)$edge.color <- "red"
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net, vertex.color="turquoise2")
# Compute node degrees (#links) and use that to set node size:
deg <- igraph::degree(net, mode="all")
V(net)$size <- deg*3
# Generate colors based on media type:
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
plot(net, vertex.label=V(net)$media, vertex.label.color="black")
# Generate colors based on media type:
colrs <- c("turquoise3", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net, vertex.label=V(net)$media, vertex.label.color="black")
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="orange")
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="yellow")
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="black")
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="brown")
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="purple")
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21, pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="purple")
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21, pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="purple")
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
# Set edge width based on weight:
E(net)$width <- E(net)$weight/6
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "red"
# Generate colors based on media type:
colrs <- c("turquoise3", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="purple")
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=-1.5, y=-0.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=-1.5, y=-0.6, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="purple")
legend(x=-1.5, y=-0.6, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=-1.8, y=-0.6, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="purple")
legend(x=-2.2, y=-0.6, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=-2.2, y=-0.6, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=1, bty="n", ncol=1)
plot(net, vertex.label=V(net)$media, vertex.label.color="black", edge.color="purple")
legend(x=-2.2, y=-0.6, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=1, bty="n", ncol=1)
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2.5, vertex.label.color="gray40",
vertex.label.cex=1, edge.color="gray85")
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2.5, vertex.label.color="black",
vertex.label.cex=1, edge.color="gray85")
# Add color to the edges based on their sources
edge.start <- ends(net, es=E(net), names=F)[,1]
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1)
plot(net, edge.color=edge.col, edge.curved=.2)
net.bg <- sample_pa(100)
V(net.bg)$size <- 8
V(net.bg)$frame.color <- "white"
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
plot(net.bg, layout=layout_randomly)
l <- layout_in_circle(net.bg)
plot(net.bg, layout=l)
plot(net.bg, layout=l2)
l2 <- layout_randomly(net.bg)
plot(net.bg, layout=l2)
l3 <- layout_on_sphere(net.bg)
plot(net.bg, layout=l3)
plot(net.bg, layout= layout_on_sphere())
plot(net.bg, layout= layout_on_sphere
plot(net.bg, layout= layout_on_sphere)
plot(net.bg, layout=layout_on_sphere)
plot(net.bg, layout=layout_on_sphere)
plot(net.bg, layout=layout_randomly)
plot(net.bg, layout=layout_on_sphere)
l4 <- layout_with_fr(net.bg)
plot(net.bg, layout=l4)
l4 <- layout_with_fr(net.bg, niter=100)
plot(net.bg, layout=l4)
ws  <-  c(1, rep(100, ecount(net.bg)-1))
lw <- layout_with_fr(net.bg, weights=ws)
plot(net.bg, layout=lw)
par(mfrow=c(2,2), mar=c(0,0,0,0))   # plot four figures - 2 rows, 2 columns
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=l)
par(mfrow=c(2,2), mar=c(0,0,0,0))   # plot four figures - 2 rows, 2 columns
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=l4)
plot(net.bg, layout=l4)
dev.off()
par(mfrow=c(2,2), mar=c(0,0,0,0))   # plot four figures - 2 rows, 2 columns
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=l4)
plot(net.bg, layout=l4)
l <- layout_with_fr(net.bg)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
par(mfrow=c(2,2), mar=c(0,0,0,0))
plot(net.bg, rescale=F, layout=l*0.4)
plot(net.bg, rescale=F, layout=l*0.6)
plot(net.bg, rescale=F, layout=l*0.8)
plot(net.bg, rescale=F, layout=l*1.0)
l <- layout_with_fr(net.bg, dim=3)
plot(net.bg, layout=l)
dev.off()
l <- layout_with_fr(net.bg, dim=3)
plot(net.bg, layout=l)
l <- layout_with_kk(net.bg)
plot(net.bg, layout=l)
l <- layout_with_graphopt(net.bg)
plot(net.bg, layout=l)
# The charge parameter below changes node repulsion:
l1 <- layout_with_graphopt(net.bg, charge=0.02)
l2 <- layout_with_graphopt(net.bg, charge=0.00000001)
par(mfrow=c(1,2), mar=c(1,1,1,1))
plot(net.bg, layout=l1)
plot(net.bg, layout=l2)
dev.off
plot(net.bg, layout=layout_with_lgl)
dev.off()
plot(net.bg, layout=layout_with_lgl)
plot(net.bg, layout=layout_with_mds)
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1]
# Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout) }
par(mfrow=c(4,4), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout) }
hist(links$weight)
hist(links$weight)
dev.off()
hist(links$weight)
mean(links$weight)
sd(links$weight)
cut.off <- mean(links$weight)
net.sp <- delete_edges(net, E(net)[weight<cut.off])
plot(net.sp, layout=layout_with_kk)
# Community detection (by optimizing modularity over partitions):
clp <- cluster_optimal(net)
class(clp)
# Community detection returns an object of class "communities"
# which igraph knows how to plot:
plot(clp, net)
# We can also plot the communities without relying on their built-in plot:
V(net)$community <- clp$membership
colrs <- adjustcolor( c("gray50", "tomato", "gold", "yellowgreen"), alpha=.6)
plot(net, vertex.color=colrs[V(net)$community])
# Community detection returns an object of class "communities"
# which igraph knows how to plot:
plot(clp, net)
plot(net, vertex.color=colrs[V(net)$community])
clp$membership
View(links)
View(nodes2)
View(nodes)
View(l4)
View(links)
dev.off()
